"""MCP server implementation."""

import asyncio
import json
import logging
import os
import sys
import atexit
from dataclasses import dataclass
from typing import Any, Dict, List, Optional

from mcp.server.fastmcp import FastMCP, Context

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Create MCP server
mcp = FastMCP("Claude MCP Scaffold")


@mcp.tool()
async def echo(message: str) -> Dict[str, Any]:
    """
    A simple echo tool that returns the input message.

    Args:
        message: The message to echo back.

    Returns:
        Dict: The echoed message.
    """
    logger.info(f"Echo tool called with message: {message}")
    return {
        "content": [
            {
                "type": "text",
                "text": f"Echo: {message}"
            }
        ]
    }


@mcp.tool()
async def calculator(operation: str, a: float, b: float, format: str = "standard") -> Dict[str, Any]:
    """
    An enhanced calculator tool with advanced operations.

    Args:
        operation: The operation to perform (add, subtract, multiply, divide, power, root, log, modulo).
        a: The first number.
        b: The second number.
        format: Output format ("standard" or "scientific").

    Returns:
        Dict: The result of the calculation.
    """
    import math
    
    logger.info(f"Calculator tool called with operation: {operation}, a: {a}, b: {b}, format: {format}")
    result = None
    
    # Basic operations
    if operation == "add":
        result = a + b
    elif operation == "subtract":
        result = a - b
    elif operation == "multiply":
        result = a * b
    elif operation == "divide":
        if b == 0:
            return {"content": [{"type": "text", "text": "Error: Cannot divide by zero"}]}
        result = a / b
    # Advanced operations
    elif operation == "power":
        result = math.pow(a, b)
    elif operation == "root":
        if a < 0 and b % 2 == 0:
            return {"content": [{"type": "text", "text": "Error: Cannot calculate even roots of negative numbers"}]}
        result = math.pow(a, 1/b)
    elif operation == "log":
        if a <= 0 or a == 1 or b <= 0:
            return {"content": [{"type": "text", "text": "Error: Invalid logarithm parameters"}]}
        result = math.log(b, a)  # logarithm of b with base a
    elif operation == "modulo":
        if b == 0:
            return {"content": [{"type": "text", "text": "Error: Cannot divide by zero"}]}
        result = a % b
    else:
        return {"content": [{"type": "text", "text": f"Error: Unknown operation '{operation}'. Supported operations: add, subtract, multiply, divide, power, root, log, modulo"}]}
    
    # Format the result
    if format.lower() == "scientific":
        formatted_result = f"{result:.6e}"
    else:
        formatted_result = str(result)
    
    return {"content": [{"type": "text", "text": f"Result: {formatted_result}"}]}

# Import and register web interaction tools
try:
    # First import the unified tool and browser manager
    from .web_interaction import browser_manager, register_unified_tool
    
    # Register the unified web interaction tool
    logger.info("Registering unified web interaction tool...")
    register_unified_tool(mcp, browser_manager)
    logger.info("Unified web interaction tool registered successfully")
    
    # For backward compatibility, also register the old tools
    from .web_interaction import (
        register_core_tools,
        register_advanced_tools,
        register_data_extraction_tools,
        register_workflow_tools
    )
    
    # Register all the old web interaction tools for backward compatibility
    logger.info("Registering legacy web interaction tools for backward compatibility...")
    register_core_tools(mcp, browser_manager)
    register_advanced_tools(mcp, browser_manager)
    register_data_extraction_tools(mcp, browser_manager)
    register_workflow_tools(mcp, browser_manager)
    logger.info("Legacy web interaction tools registered successfully")
    
    # We'll clean up browser resources when the process ends
    async def cleanup_browser():
        """Clean up browser resources when shutting down."""
        logger.info("Shutting down browser resources...")
        await browser_manager.close()
        logger.info("Browser resources shut down")
    
    # Register an exit handler to clean up resources
    atexit.register(lambda: asyncio.run(cleanup_browser()))

except ImportError as e:
    logger.warning(f"Web interaction tools not loaded. Error: {str(e)}")
    logger.warning("Make sure to install required dependencies with install_dependencies.py")


@mcp.prompt()
def help_prompt() -> str:
    """A helpful prompt explaining how to use this MCP server."""
    try:
        # Check if web interaction tools are available
        from .web_interaction import browser_manager
        has_web_tools = True
    except ImportError:
        has_web_tools = False
    
    base_prompt = """
    This is the Claude MCP Scaffold Server. You can use the following tools:

    - echo: Echo back a message
    - calculator: Perform enhanced arithmetic operations (add, subtract, multiply, divide, power, root, log, modulo)
    """
    
    web_tools_prompt = """
    Advanced Web Interaction tools:
    
    - web_interact: Unified tool for web interactions
      This tool can perform multiple operations in a single call:
      - navigate: Navigate to a URL in a browser
      - extract_content: Extract content from a web page
      - find_element: Find elements on a page using natural language
      - interact: Interact with elements (click, type, etc.)
      - extract_structured: Extract structured data from a page
      
    Legacy web interaction tools (for backward compatibility):
    - navigate: Navigate to a URL in a browser
    - extract_page_content: Extract content from a web page
    - semantic_find: Find elements on a page using natural language
    - interact_with_element: Interact with elements (click, type, etc.)
    - extract_structured_data: Extract structured data from a page
    - run_web_workflow: Run multi-step web workflows
    """
    
    if has_web_tools:
        return base_prompt + web_tools_prompt
    return base_prompt
